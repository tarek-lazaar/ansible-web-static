name: 'new website'

on:
  push:
    branches:
    - master
  pull_request:

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    environment: production



    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@master

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper : false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform init
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION : ${{ secrets.AWS_REGION }}
      run: terraform init -input=false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Sleep for 30 seconds
      uses: jakejarvis/wait-action@master
      with:
        time: '120s'

    - name: create inventory file & run ansible
      run: |
          output=$(terraform output ip_address)
          touch ${{ github.workspace }}/inventory.ini
          echo "[all]" >> ${{ github.workspace }}/inventory.ini
          echo $output | tr -d '"' >> ${{ github.workspace }}/inventory.ini
          echo "[all:vars]" >> ${{ github.workspace }}/inventory.ini
          echo 'ansible_user = "ubuntu"' >> ${{ github.workspace }}/inventory.ini
          echo 'ansible_ssh_private_key_file = ".ssh/new-key-1.pem"' >> ${{ github.workspace }}/inventory.ini
          cat ${{ github.workspace }}/inventory.ini
          sudo apt-get install ansible
          mkdir ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/new-key-1.pem
          chmod 600 ~/.ssh/new-key-1.pem
          ansible all --list-hosts
          ansible-playbook -i ${{ github.workspace }}/inventory.ini playbook.yml

      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        SSH_KEY: ${{secrets.SSH_KEY}}









